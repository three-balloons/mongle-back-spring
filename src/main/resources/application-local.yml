## 로컬에서 돌릴 때는 주석 처리 후 실행
#server:
#  port: ${SERVER_PORT}
#  ssl:
#    key-store-password: ${SSL_PASSWORD}
#    key-store: classpath:ssl/keystore.p12
#    key-store-type: PKCS12

spring:
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  config:
    import: optional:file:.env[.properties]
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQLDialect
    show-sql: true
    hibernate:
      ddl-auto: update
      properties:
        hibernate:
          format_sql: true
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DB}
    username: ${MYSQL_USER}
    password: ${MYSQL_PASSWORD}
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}

springdoc:
  swagger-ui:
    path: /api-test  # swagger-ui 접근 경로에 대한 별칭, 해당 주소로 접속해도 http://localhost:8080/swagger-ui/index.html로 리다이렉션 됨.
    groups-order: DESC # path, query, body, response 순으로 출력
    tags-sorter: alpha # 태그를 알파벳 순으로 정렬
    operations-sorter: method  # delete - get - patch - post - put 순으로 정렬, alpha를 사용하면 알파벳 순으로 정렬 가능
  paths-to-match:
    - /api/** # swagger-ui에 표시할 api의 엔드포인트 패턴

jwt:
  issuer: ${JWT_ISSUER}
  secret_key: ${JWT_SECRET_KEY}

# AWS S3
cloud:
  aws:
    credentials:
      access-key: ${IAM_ACCESS_KEY}
      secret-key: ${IAM_SECRET_KEY}
    region:
      static: ap-northeast-2  # 버킷의 리전
    s3:
      bucket: ${BUCKET_NAME}   # 버킷 이름
    stack:
      auto: false

